/* 
 * NEM SPs
 *
 * TestNet SP API Endpoint
 *
 * OpenAPI spec version: v0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using io.spfs.NeutoSpfs.Client;
using io.spfs.NeutoSpfs.Api;
using io.spfs.NeutoSpfs.Model;

namespace io.spfs.NeutoSpfs.Test
{
    /// <summary>
    ///  Class for testing DataHashApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DataHashApiTests
    {
        private DataHashApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DataHashApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DataHashApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DataHashApi
            //Assert.IsInstanceOfType(typeof(DataHashApi), instance, "instance is a DataHashApi");
        }

        
        /// <summary>
        /// Test GenerateByteArrayDataHashOnlyUsingPOST
        /// </summary>
        [Test]
        public void GenerateByteArrayDataHashOnlyUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fileName = null;
            //byte[] byteArrayFile = null;
            //var response = instance.GenerateByteArrayDataHashOnlyUsingPOST(fileName, byteArrayFile);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GenerateDataHashOnlyUsingPOST
        /// </summary>
        [Test]
        public void GenerateDataHashOnlyUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream file = null;
            //var response = instance.GenerateDataHashOnlyUsingPOST(file);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GenerateHashAndExposeByteArrayFileToNetworkUsingPOST
        /// </summary>
        [Test]
        public void GenerateHashAndExposeByteArrayFileToNetworkUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fileName = null;
            //byte[] byteArrayFile = null;
            //var response = instance.GenerateHashAndExposeByteArrayFileToNetworkUsingPOST(fileName, byteArrayFile);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GenerateHashAndExposeFileToNetworkUsingPOST
        /// </summary>
        [Test]
        public void GenerateHashAndExposeFileToNetworkUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream file = null;
            //var response = instance.GenerateHashAndExposeFileToNetworkUsingPOST(file);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GenerateHashExposeFileToNetworkBuildAndSignUsingPOST
        /// </summary>
        [Test]
        public void GenerateHashExposeFileToNetworkBuildAndSignUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xPvkey = null;
            //string xPubkey = null;
            //string messageType = null;
            //System.IO.Stream file = null;
            //var response = instance.GenerateHashExposeFileToNetworkBuildAndSignUsingPOST(xPvkey, xPubkey, messageType, file);
            //Assert.IsInstanceOf<RequestAnnounceDataSignature> (response, "response is RequestAnnounceDataSignature");
        }
        
    }

}
