/* 
 * NEM SPs
 *
 * TestNet SP API Endpoint
 *
 * OpenAPI spec version: v0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using io.spfs.NeutoSpfs.Client;
using io.spfs.NeutoSpfs.Api;
using io.spfs.NeutoSpfs.Model;

namespace io.spfs.NeutoSpfs.Test
{
    /// <summary>
    ///  Class for testing PublishApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PublishApiTests
    {
        private PublishApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PublishApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PublishApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PublishApi
            //Assert.IsInstanceOfType(typeof(PublishApi), instance, "instance is a PublishApi");
        }

        
        /// <summary>
        /// Test AnnounceRequestPublishDataSignatureReturnHashOnlyUsingPOST
        /// </summary>
        [Test]
        public void AnnounceRequestPublishDataSignatureReturnHashOnlyUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RequestAnnounceDataSignature requestAnnounceDataSignature = null;
            //var response = instance.AnnounceRequestPublishDataSignatureReturnHashOnlyUsingPOST(requestAnnounceDataSignature);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test AnnounceRequestPublishDataSignatureUsingPOST
        /// </summary>
        [Test]
        public void AnnounceRequestPublishDataSignatureUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RequestAnnounceDataSignature requestAnnounceDataSignature = null;
            //var response = instance.AnnounceRequestPublishDataSignatureUsingPOST(requestAnnounceDataSignature);
            //Assert.IsInstanceOf<ResponseEntity> (response, "response is ResponseEntity");
        }
        
        /// <summary>
        /// Test PublishAndSendMultipleFilesToAddressUsingPOST
        /// </summary>
        [Test]
        public void PublishAndSendMultipleFilesToAddressUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //string xPvkey = null;
            //string messageType = null;
            //List<System.IO.Stream> files = null;
            //var response = instance.PublishAndSendMultipleFilesToAddressUsingPOST(address, xPvkey, messageType, files);
            //Assert.IsInstanceOf<ResponseEntity> (response, "response is ResponseEntity");
        }
        
        /// <summary>
        /// Test PublishAndSendSingleFileToAddressUsingPOST
        /// </summary>
        [Test]
        public void PublishAndSendSingleFileToAddressUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //string xPvkey = null;
            //string messageType = null;
            //System.IO.Stream file = null;
            //var response = instance.PublishAndSendSingleFileToAddressUsingPOST(address, xPvkey, messageType, file);
            //Assert.IsInstanceOf<ResponseEntity> (response, "response is ResponseEntity");
        }
        
        /// <summary>
        /// Test PublishAndSendSingleFileToAddressesUsingPOST
        /// </summary>
        [Test]
        public void PublishAndSendSingleFileToAddressesUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xPvkey = null;
            //List<string> addresses = null;
            //string messageType = null;
            //System.IO.Stream file = null;
            //var response = instance.PublishAndSendSingleFileToAddressesUsingPOST(xPvkey, addresses, messageType, file);
            //Assert.IsInstanceOf<ResponseEntity> (response, "response is ResponseEntity");
        }
        
    }

}
